module ListExample where

import Daml.Script
import DA.List

listTest: Script ()
listTest = script do
  let
    intList = [1,2,4]
    fruitList = ["orange", "apple", "banana", "pear", "kiwi", "watermelon"]
    veggieList = ["carrot", "potato"]

    rangeList = [10 .. 20]
    evenList = [2,4 .. 20]
    longList = [1 .. 100]
    listOfLists = [[1,3,5,2,3,1,2,4,5], [1,2,3,4,5,6,7,8,9],[1,2,4,2,1,6,3,1,3,2,3,6]]
    
    -- concatenate lists into new list
    fruitAndVeggieList = fruitList <> veggieList

    -- Define a function to filter the numbers
    getFilteredNumbers : [Int] -> [Int]
    getFilteredNumbers numberList = [x | x <- numberList, x % 7 == 3]
  
  
  -- head shows 1st item in the list
  debug $ "Head: " <> show (head fruitList)
  -- tail shows everything after the head
  debug $ "Tail: " <> show (tail fruitList)
  -- last shows the last item in the list
  debug $ "last: " <> show (last fruitList)
  -- sort items in list
  debug $ "sort: " <> show (sort fruitList)
  -- init shows all items except the last one
  debug $ "init: " <> show (init fruitList)
  -- reverse items in the list
  debug $ "reverse: " <> show (reverse fruitList)
  -- take n items from the list, starting with first item
  debug $ "take: " <> show (take 2 fruitList)
  -- returns true if item in the list
  debug $ "elem: " <> show (elem "apple" fruitList)
  -- same as above using infix instead
  debug $ "elem: " <> show ("apple" `elem` fruitList)
  -- sum of all numbers in the list
  debug $ "sum: " <> show (sum intList)
  -- product of all numbers in the list
  debug $ "product: " <> show (product intList)
  -- show length of list
  debug $ "length: " <> show (length veggieList)
  -- print entire list that was created using the ".." notation above when declared & assigned
  debug $ "range from 10 to 20: " <> show (rangeList)
  debug $ "even numbers from 2 to 20: " <> show (evenList)
   -- List Comprehension
  debug $ "square each number in list of evenList: " <> show ([x^2 | x <- evenList])

  
  -- adds item to beginning of list
  debug $ "prepend: " <> show ("mango" :: fruitList)
  debug $ "range: " <> show (fruitAndVeggieList)
  debug $ fruitAndVeggieList
  -- Get by index # (instead of using head & tail)
  debug $ "Get apple from fruitList: " <> show (fruitList !! 1)
  debug $ "Get banana fruitList: " <> show (fruitList !! 2)
  debug $ "Get kiwi from fruitList: " <> show (fruitList !! 4)
  -- get kiwi using a combination of head and tails
  debug $ "Get kiwi using head and tails: " <> show (head(tail(tail(tail(tail(fruitList))))))

 -- just experimenting / practicing below
  debug $ "length of fruitList: " <> show (length fruitList)
  debug $ "is kiwi in my fruitList? " <> show ("kiwi" `elem` fruitList) -- True
  debug $ "is grapefruit in my fruitList? " <> show ("grapefruit" `elem` fruitList) --False
  debug $ "is fruitList null? " <> show (null fruitList)
  debug $ "reversed fruitList: " <> show (reverse fruitList)
  debug $ "sort fruitList: " <> show (sort fruitList)
  debug $ "take 3 fruits from beginning of list: " <> show (take 3 fruitList)
  debug $ "drop the first 2 fruits from the beginning of list: " <> show (drop 2 fruitList)
  debug $ "sum of numbers in rangeList: " <> show (sum rangeList)
  debug $ "sum of numbers in evenList: " <> show (sum evenList)
  debug $ "product of numbers in rangeList: " <> show (product rangeList)
  debug $ "product of numbers in evenList: " <> show (product evenList)
  debug $ "using replicate to show a list of 3 tens: " <> show (replicate 3 10)

  debug $ "getting all numbers from 1 to 100 whose remainder when divided by 7 is 3: " <> show (getFilteredNumbers longList)
  -- list comprehension on list of lists.  First we break down the listOfLists into 
  -- individual lists (with variable name xx), Then we break each list down into its 
  -- individual elements (with variable name x)
  debug $ "getting even numbers from list of lists: " <> show ([[ x | x <- xx, x % 2 == 0 ] | xx <- listOfLists ])
 
  