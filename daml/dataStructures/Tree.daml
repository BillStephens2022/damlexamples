module Tree where

import Daml.Script


data Tree a = EmptyTree | Node { value : a, left : Tree a, right : Tree a } deriving (Show)

singleton : a -> Tree a
singleton x = Node x EmptyTree EmptyTree

treeInsert: (Ord a) => a -> Tree a -> Tree a
treeInsert x EmptyTree = singleton x
treeInsert x (Node a left right)
    | x == a = Node x left right
    | x < a = Node a (treeInsert x left) right
    | x > a = Node a left (treeInsert x right)
treeInsert _ _ = EmptyTree

treeElem: (Ord a ) => a -> Tree a -> Bool
treeElem x EmptyTree = False
treeElem x (Node a left right)
    | x == a = True
    | x < a = treeElem x left
    | x > a = treeElem x right
treeElem _ _= False

instance Functor Tree where
    fmap f EmptyTree = EmptyTree
    fmap f (Node x left right) = Node (f x) (fmap f left) (fmap f right)

testTree: Script ()
testTree = script do
    let nums = [8,6,4,1,7,3,5]
    let numsTree = foldr treeInsert EmptyTree nums
    debug $ show numsTree
    debug $ 8 `treeElem` numsTree
    debug $ 100 `treeElem` numsTree
    debug $ 1 `treeElem` numsTree
    debug $ 10 `treeElem` numsTree
    debug $ (*2) <$> numsTree

