module IterativeExample where

import Daml.Script

-- recursion example
fibonacci: Int -> Int
fibonacci n 
    | n <= 2 = 1
    | otherwise = fibonacci (n-2) + fibonacci (n-1)

testFibonacci: Script ()
testFibonacci = script do
    debug $ fibonacci 7

-- map example
moduloUsingMap: [Int] -> Int -> [Int]
moduloUsingMap x y = map (% y ) x

-- filter out numbers greater than x
-- where x is an Int and y is a list of Ints
-- returns a filtered array of ints
filterGreaterThan: Int -> [Int] -> [Int]
filterGreaterThan x y = filter (> x) y

-- filter even numbers out of a list of integers
filterEvens: [Int] -> [Int]
filterEvens xs = filter (\ x -> x % 2 == 0) xs

-- map function adding a number to every number in a list
addSomethingToEveryNumberInList: Int -> [Int] -> [Int]
addSomethingToEveryNumberInList n intList = map (+n) intList

-- square every number in a list of lists and return the squared list of lists
squareEveryNumberInListOfLists: [[Int]] -> [[Int]]
squareEveryNumberInListOfLists xxs = map (map (^2)) xxs

-- function to check if a number is odd
isOdd: Int -> Bool
isOdd x = x % 2 == 1
-- sum all of the odd squares that are less than a number x
sumOfOddSquares: Int -> Int
sumOfOddSquares x = sum (takeWhile (<x) (filter isOdd (map (^2) [1..x])))

testMaps: Script ()
testMaps = script do
    debug $ "divide every number by 3 and return remainder using map & modulo: " <> show (moduloUsingMap [14, 15, 19, 20] 3)
    debug $ "Add 3 to every number in list using 'map': " <> show (addSomethingToEveryNumberInList 3 [1,5,3,1,6])
    debug $ "square every number in a list of lists: " <> show (squareEveryNumberInListOfLists [[1,2],[3,4,5,6],[7,8]])
    debug $ "sum of the odd squares that are less than 10,000: " <> show (sumOfOddSquares(10000))
    
testFilters: Script()
testFilters = script do
    debug $ "Filtering list for numbers greater than 3: " <> show (filterGreaterThan 3 [1,5,3,2,1,6,4,3,2,1])
    debug $ "Filtering even numbers from list of numbers: " <> show (filterEvens [1..20])

-- folds
-- foldl iterates from left to right
-- foldr iterates from right to left
-- a fold function takes 3 arguments - 
  -- 1) a binary function, 
  -- 2) starting value for the accumulator (often 0),
  -- 3) and a list

sumList: [Int] -> Int
-- arguments: 1) binary function '+', 
-- 2) accumulator starting value: '0', and 
-- 3) a list x
-- returns the accumulator value
sumList x = foldl (+) 0 x 

listToText: [Int] -> Text
listToText x = foldl (\acc y -> acc <> show y) "" x

reverseListToText: [Int] -> Text
reverseListToText x = foldr (\y acc -> acc <> show y) "" x

testFolds: Script ()
testFolds = script do
    debug $ sumList [1..4]
    debug $ listToText [1..4]
    debug $ reverseListToText [1..4]

























    