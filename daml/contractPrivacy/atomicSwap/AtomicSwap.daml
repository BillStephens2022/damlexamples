module AtomicSwap where

import Daml.Script

data SplitResult = SplitResult with
    splitAsset : ContractId Asset
    remainder : ContractId Asset
        deriving (Eq, Show)

template Asset
    with
        issuer: Party
        owner : Party
        amount : Decimal
        observers: [Party]
    where
        signatory issuer, owner
        observer observers
        ensure amount > 0.0 

        choice Asset_Transfer: ContractId AssetTransferProposal 
            with
                recipient: Party
            controller owner
            do
                create AssetTransferProposal with
                    asset = this with observers = []
                    recipient

        choice Asset_Merge: ContractId Asset
            with
                otherAssetCid: ContractId Asset
            controller owner
            do
                otherAsset <- fetch otherAssetCid

                assertMsg "Merge failed: issuer does not match" (issuer == otherAsset.issuer)
                assertMsg "Merge failed: owner does not match" (owner == otherAsset.owner)

                archive otherAssetCid
                create this with
                    amount = amount + otherAsset.amount

        choice Asset_Split: SplitResult
            with
                splitAmount: Decimal
            controller owner
            do
                splitAsset <- create this with
                    amount = splitAmount
                remainder <- create this with
                    amount = amount - splitAmount
                pure SplitResult with
                    splitAsset
                    remainder

        choice Asset_SetObservers: ContractId Asset
            with
                newObservers: [Party]
            controller owner
            do
                create this with
                    observers = newObservers

template AssetTransferProposal
    with
        asset: Asset
        recipient : Party
    where
        signatory (signatory asset) 
        observer recipient
        ensure asset.amount > 0.0

        choice AssetTransferProposal_Accept: ContractId Asset
            controller recipient
            do
                create asset with
                    owner = recipient

        choice AssetTransferProposal_Reject: ContractId Asset
            controller recipient
            do
                create asset

template SwapProposal
    with
        initiator: Party
        recipient: Party
        offerCid: ContractId Asset
        requestedAsset: Asset
    where
        signatory initiator
        observer recipient

        choice SwapProposal_Accept: ()
            with
                assetCid: ContractId Asset
            controller recipient
            do
                asset <- fetch assetCid
                assertMsg "Asset issuer does NOT match." (asset.issuer == requestedAsset.issuer) 
                assertMsg "Asset amount does NOT match." (asset.amount == requestedAsset.amount)
                assertMsg "Asset owner does NOT match." (asset.owner == requestedAsset.owner)

                offerTransferProposal <- exercise offerCid Asset_Transfer with recipient 
                requestedTransferProposal <- exercise assetCid Asset_Transfer with recipient = initiator
                exercise offerTransferProposal AssetTransferProposal_Accept
                exercise requestedTransferProposal AssetTransferProposal_Accept
                pure()

data TestParties = TestParties with
    alice: Party
    bob: Party
    ub: Party
    eb: Party

setupTestParties = script do
    alice <- allocateParty "Alice"
    bob <- allocateParty "Bob"
    ub <- allocateParty "US_Bank"
    eb <- allocateParty "EU_Bank"

    pure TestParties with ..


testAtomicSwap = script do
    -- destructuring party names in line below so we don't need to type testParties.alice, testParties.bob, etc
    (testParties@TestParties{..}) <- setupTestParties

    ubAssetCid1 <- submit ub do
        createCmd Asset with 
            issuer = ub
            owner = ub
            amount = 700.0
            observers = []
    
    ubAssetCid2 <- submit ub do
        createCmd Asset with 
            issuer = ub
            owner = ub
            amount = 300.0
            observers = []
    
    mergedUbAssetCid <- submit ub do
        exerciseCmd ubAssetCid1 Asset_Merge with
            otherAssetCid = ubAssetCid2
    
    splittedUbAssetRecord <- submit ub do
        exerciseCmd mergedUbAssetCid Asset_Split with
            splitAmount = 400.0
    
    ubToAliceCid <- submit ub do
        exerciseCmd splittedUbAssetRecord.splitAsset Asset_Transfer with
            recipient = alice
    
    aliceAssetCid <- submit alice do
        exerciseCmd ubToAliceCid AssetTransferProposal_Accept

    ubToBobCid <- submit ub do
        exerciseCmd splittedUbAssetRecord.remainder Asset_Transfer with
            recipient = bob

    bobAssetCid1 <- submit bob do
        exerciseCmd ubToBobCid AssetTransferProposal_Accept

    aliceToBobCid <- submit alice do
        exerciseCmd aliceAssetCid Asset_Transfer with
            recipient = bob
  
    bobAssetCid2 <- submit bob do
        exerciseCmd aliceToBobCid AssetTransferProposal_Accept
    
-- ================= ATOMIC SWAP TEST ===========================
    ebAssetCid <- submit eb do
        createCmd Asset with
            issuer = eb
            owner = eb
            amount = 380.0
            observers = []

    ebToAliceCid <- submit eb do
        exerciseCmd ebAssetCid Asset_Transfer with
            recipient = alice

    aliceEuroCid <- submit alice do
        exerciseCmd ebToAliceCid AssetTransferProposal_Accept

    aliceEuroWithObsCid <- submit alice do
        exerciseCmd aliceEuroCid Asset_SetObservers with
            newObservers = [bob]

    aliceSwapBobCid <- submit alice do
        createCmd SwapProposal with
            initiator = alice
            recipient = bob
            offerCid = aliceEuroWithObsCid
            requestedAsset = Asset with
                issuer = ub
                owner = bob
                amount = 400.0
                observers = []

    submit bob do
        exerciseCmd aliceSwapBobCid SwapProposal_Accept with
            assetCid = bobAssetCid2

    pure ()
    