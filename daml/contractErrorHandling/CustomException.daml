module CustomException where

import Daml.Script
import DA.Action (when)
import DA.Exception

template SocialNetworkUser
    with
        username: Party
        following: [Party]
        alias: Text
    where
        signatory username
        observer following

        key username : Party
        maintainer key

        ensure alias /= ""

        choice Follow: ContractId SocialNetworkUser
            with
                userToFollow: Party
            controller username
            do
                assertMsg "You cannot follow yourself" (userToFollow /= username)
                assertMsg "You cannot follow the same user twice" (notElem userToFollow following)
                create this with following = userToFollow :: following
        
        nonconsuming choice ChangeAlias: Either Text (ContractId SocialNetworkUser)
            with
                newAlias: Text
            controller username
            do
                -- Method 1 for Error Handling, throw an error 'when' newAlias is an empty string
                -- -- when new alias is an empty string, throw the custom exception we created
                -- when (newAlias == "") $ -- import DA.Action (when)
                --     throw ChangeFailed with
                --         -- these are the field names we created below in the custom exception
                --         fieldName = "alias"
                --         details = "cannot be an empty string"
                
                -- archive self
                -- create this with alias = newAlias
            -- Method 2 - use the custom exception and throw it in a try-catch block
            -- alternately we can use a try catch block
                try do
                    if (newAlias == "") then do
                        throw ChangeFailed with
                            fieldName = "alias"
                            details = "cannot be an empty string"
                    else do
                        archive self
                        cid <- create this with alias = newAlias
                        let result = Right cid
                        pure result
                catch
                    (ChangeFailed f d) -> do
                        let result = Left $ f <> " " <> d
                        pure result

                

-- Custom Exception
exception ChangeFailed
    with
        fieldName: Text
        details: Text
    where
        message "Provided input is invalid."                        

test = script do
    alice <- allocateParty "Alice"
    bob <- allocateParty "Bob"

    aliceCid <- submit alice do
        createCmd SocialNetworkUser with
            username = alice
            following = []
            alias = "aliceAlias"

    bobCid <- submit bob do
        createCmd SocialNetworkUser with
            username = bob
            following = []
            alias = "bobAlias"

    -- succeeds since valid alias is passed      
    submit alice do
        exerciseCmd aliceCid ChangeAlias with newAlias = "ExpertDamler"
    
    -- fails since invalid alias (an empty string) is passed which doesn't
    -- meet the precondition in the ensure statement of the template
    submit bob do
        exerciseCmd bobCid ChangeAlias with newAlias = ""