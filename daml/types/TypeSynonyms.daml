module TypeSynonyms where

import Daml.Script
import DA.Map as Map

data LockerState = Taken | Free deriving (Show, Eq)

type Code = Text

type LockerMap = Map.Map Int (LockerState, Code)

lockerLookup : Int -> LockerMap -> Either Text Code
lockerLookup lockerNumber map =
    case Map.lookup lockerNumber map of
        None -> Left $ "Locker " <> show lockerNumber <> " doesn't exist!"
        Some (state, code) -> case state of
            Free -> Right code
            _ -> Left $ "Locker " <> show lockerNumber <> " is already taken!"

lockers: LockerMap
lockers = Map.fromList
    [
    (100,(Taken, "ZD39I")),
    (101,(Free, "JAH3I")),
    (103,(Free, "IQSA9")),
    (105,(Free, "QOTSA")),
    (109,(Taken, "893JJ")),
    (110,(Taken, "99292"))
    ]

lockerLookupTest: Script ()
lockerLookupTest = script do
    debug $ show (lockerLookup 101 lockers)
    debug $ show (lockerLookup 100 lockers)
    debug $ show (lockerLookup 102 lockers)
    debug $ show (lockerLookup 110 lockers)
    debug $ show (lockerLookup 105 lockers)